const { db, batchSet, commitBatch } = require("../admin");
const { generateUID, capitalizeFirstLetter } = require("../utils");
const { signatureHTML } = require("../emailSignature");

// This should be called by a pubsub scheduler every 25 hours.
// It reads all the documents from the administrators collection.
// For each of them that meet the criteria, randomizes them into one of
// our experimental conditions and sends them personalized invitation
// and reminder emails.
// The algorithm is explained at emailing.drawio
module.exports = async context => {
  try {
    // We don't want to send many emails at once, because it may drive Gmail crazy.
    // waitTime keeps increasing for every email that should be sent and in a setTimeout
    // postpones sending the next email until the next waitTime.
    const administratorDocs = await db.collection("administrators").get();
    const emailsDocs = await db.collection("emails").where("sent", "==", false).get();
    const emails = emailsDocs.docs.map(emailDoc => emailDoc.data().email);
    for (let administratorDoc of administratorDocs.docs) {
      const administratorData = administratorDoc.data();
      const { email, city, stateInfo, country } = administratorData;
      if (
        // Only those administrators whose information is verified by at least 3 other researchers.
        (administratorData?.upVotes || 0) - (administratorData?.downVotes || 0) >= 3 &&
        // We have not sent them any emails or less than 4 reminders
        (!administratorData.reminders || administratorData.reminders < 4) &&
        // Their next reminder is not scheduled yet, or it should have been sent before now.
        (!administratorData.nextReminder || administratorData.nextReminder.toDate().getTime() < new Date().getTime()) &&
        // They have not already clicked any of the options in their email.
        !administratorData.yes &&
        !administratorData.no &&
        !administratorData.alreadyTalked &&
        !administratorData.inviteStudents &&
        administratorData.howToAddress &&
        !administratorData.explanation.includes("This is ") &&
        !emails.includes(email)
      ) {
        // We don't want to send many emails at once, because it may drive Gmail crazy.
        // WaitTime keeps increasing for every email that should be sent and in a setTimeout
        // postpones sending the next email until the next waitTime.
        const mailOptions = {
          from: process.env.EMAIL,
          to: email,
          subject: `Offering Student Internships for Large-scale Collaborative Learning/Research`,
          html: `<p>Hello ${(administratorData.howToAddress || "")
            .split(" ")
            .map(s => capitalizeFirstLetter(s))
            .join(" ")},</p>
                <p></p>
                <p>We are a research group at the University of Michigan, School of Information. We would like to invite your students to join our online research communities and collaborate with us on research literature review on their desired topics.</p>
                <p></p>
                <p>We have developed an online platform for collaborative learning and research, called 1Cademy (more information <a href="https://1cademy.com" target="_blank">on this page</a>). Since Fall 2020, out of 10,000 students who applied, more than 1,600 talented students from 183 schools have joined 1Cademy to collaboratively summarize, visualize, improve, and present our notes from books and research papers on a weekly basis and get constructive feedback about their research. You can check out <a href="https://1cademy.com/#topics" target="_blank">our existing research communities</a> and search through <a href="https://1cademy.com/search" target="_blank">the 1Cademy Knowledge Graph</a> to learn more about the content generated by students. We also have community leadership opportunities for qualified students to lead our existing communities or establish new research communities.</p>
                <p></p>
                <p>${
                  administratorData.country === "ðŸ‡ºðŸ‡¸ United States;US"
                    ? "Considering the success we've had with the previous interns who joined our communities from your school, we would like to invite more of your students to join our communities. "
                    : ""
                }We would like to ask if you can kindly inform your students about our online research opportunities, so they can apply through <a href="https://1cademy.com" target="_blank">the 1Cademy homepage</a>.</p>
                <p>Please let us know which action you would like to take:</p>
                <ul>
                  <li><a href="https://1cademy.us/inviteStudents/administrators/${
                    administratorDoc.id
                  }" target="_blank">I'd like to invite students to apply.</a></li>${
            // '<li><a href="https://1cademy.us/administratorYes/' +
            // administratorDoc.id +
            // '" target="_blank">' +
            // "I'd like to schedule a meeting with you.</a></li>" +
            ""
          }
                  <li><a href="https://1cademy.us/interestedAdministratorLater/${
                    // These are all sending requests to the client side.
                    administratorDoc.id
                  }" target="_blank">Send me a reminder in a few weeks.</a></li>
                  <li><a href="https://1cademy.us/notInterestedAdministrator/${
                    // These are all sending requests to the client side.
                    administratorDoc.id
                  }" target="_blank">Do not contact me again.</a></li>
                </ul>
                <p>Reply to this email if you have any questions or concerns.</p>
                <p></p>
                <p>Best regards,</p>
                ${signatureHTML}
                <img src="https://1cademy.us/api/loadImage/administrator/${
                  // For tracking when they open their email.
                  // Note that the email clients that cache emails like those on iPad or Outlook open the content
                  // of the emails without the user's knowlege, so those would be false positives for us.
                  administratorDoc.id + "/" + generateUID()
                }"
                data-os="https://drive.google.com/uc?id=1H4mlCx7BCxIvewNtUwz5GmdVcLnqIr8L&amp;export=download" 
                width="420" height="37"><br></div></div></div>`
        };
        const emailRef = db.collection("emails").doc();
        await batchSet(emailRef, {
          mailOptions,
          reason: "administrator",
          createdAt: new Date(),
          documentId: administratorDoc.id,
          city,
          email,
          stateInfo,
          country,
          urgent: false,
          sent: false
        });
      }
    }
    await commitBatch();
  } catch (err) {
    console.log({ err });
  }
};
